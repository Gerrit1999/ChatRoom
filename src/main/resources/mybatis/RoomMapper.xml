<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.RoomMapper">
    <resultMap id="BaseResultMap" type="com.example.entity.Room">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="password" jdbcType="CHAR" property="password"/>
        <result column="host_id" jdbcType="INTEGER" property="hostId"/>
        <result column="enable" jdbcType="BIT" property="enable"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, name, password, host_id, enable
    </sql>
    <select id="getUnread" resultType="java.lang.Integer">
        select unread
        from inner_room_user
        where room_id = #{roomId}
          and user_id = #{userId}
    </select>
    <select id="selectUserInRoom" resultType="java.lang.Integer">
        select count(id)
        from inner_room_user
        where room_id = #{roomId}
          and user_id = #{userId}
    </select>
    <select id="selectChatRoomsByUserId" resultMap="BaseResultMap">
        SELECT t_room.id,
               t_room.`name`,
               t_room.`password`,
               t_room.host_id,
               t_room.enable
        FROM t_room
                 RIGHT JOIN inner_room_user ON t_room.id = inner_room_user.room_id
        WHERE user_id = #{userId}
    </select>
    <select id="selectByExample" parameterType="com.example.entity.RoomExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_room
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteUser">
        delete
        from inner_room_user
        where room_id = #{roomId}
          and user_id = #{userId}
    </delete>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from t_room
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.example.entity.RoomExample">
        delete from t_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insertUser">
        insert into inner_room_user(room_id, user_id, unread)
        values (#{roomId}, #{userId}, 0)
    </insert>
    <insert id="insert" parameterType="com.example.entity.Room" keyProperty="id" useGeneratedKeys="true">
        insert into t_room (id, name, password,
                            host_id, enable)
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=CHAR},
                #{hostId,jdbcType=INTEGER}, #{enable,jdbcType=BIT})
    </insert>
    <insert id="insertSelective" parameterType="com.example.entity.Room" keyProperty="id" useGeneratedKeys="true">
        insert into t_room
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="hostId != null">
                host_id,
            </if>
            <if test="enable != null">
                enable,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=CHAR},
            </if>
            <if test="hostId != null">
                #{hostId,jdbcType=INTEGER},
            </if>
            <if test="enable != null">
                #{enable,jdbcType=BIT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.example.entity.RoomExample" resultType="java.lang.Long">
        select count(*) from t_room
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateUnread">
        UPDATE inner_room_user
        SET unread = #{unread}
        WHERE room_id = #{roomId}
          AND user_id = #{userId}
    </update>
    <update id="updateByExampleSelective" parameterType="map">
        update t_room
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=CHAR},
            </if>
            <if test="record.hostId != null">
                host_id = #{record.hostId,jdbcType=INTEGER},
            </if>
            <if test="record.enable != null">
                enable = #{record.enable,jdbcType=BIT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_room
        set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=CHAR},
        host_id = #{record.hostId,jdbcType=INTEGER},
        enable = #{record.enable,jdbcType=BIT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.example.entity.Room">
        update t_room
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=CHAR},
            </if>
            <if test="hostId != null">
                host_id = #{hostId,jdbcType=INTEGER},
            </if>
            <if test="enable != null">
                enable = #{enable,jdbcType=BIT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.entity.Room">
        update t_room
        set name     = #{name,jdbcType=VARCHAR},
            password = #{password,jdbcType=CHAR},
            host_id  = #{hostId,jdbcType=INTEGER},
            enable   = #{enable,jdbcType=BIT}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>